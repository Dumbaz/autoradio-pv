# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2018-01-03 23:05
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import tinymce.models
import versatileimagefield.fields


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('program', '0011_programslot_remove_is_active'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=32, verbose_name='Category')),
                ('abbrev', models.CharField(max_length=4, unique=True, verbose_name='Abbreviation')),
                ('slug', models.SlugField(max_length=32, unique=True, verbose_name='Slug')),
                ('color', models.TextField(blank=True, max_length=7, verbose_name='Color')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('button', models.ImageField(blank=True, null=True, upload_to='buttons', verbose_name='Button image')),
                ('button_hover', models.ImageField(blank=True, null=True, upload_to='buttons', verbose_name='Button image (hover)')),
                ('big_button', models.ImageField(blank=True, null=True, upload_to='buttons', verbose_name='Big button image')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ('category',),
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Language')),
            ],
            options={
                'verbose_name': 'Language',
                'verbose_name_plural': 'Languages',
                'ordering': ('language',),
            },
        ),
        migrations.CreateModel(
            name='RTRCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rtrcategory', models.CharField(max_length=32, verbose_name='RTR Category')),
                ('abbrev', models.CharField(max_length=4, unique=True, verbose_name='Abbreviation')),
                ('slug', models.SlugField(max_length=32, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'RTR Category',
                'verbose_name_plural': 'RTR Categories',
                'ordering': ('rtrcategory',),
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('byweekday', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], verbose_name='Weekday')),
                ('dstart', models.DateField(verbose_name='First date')),
                ('tstart', models.TimeField(verbose_name='Start time')),
                ('tend', models.TimeField(verbose_name='End time')),
                ('until', models.DateField(verbose_name='Last date')),
                ('is_repetition', models.BooleanField(default=False, verbose_name='Is repetition')),
                ('fallback_id', models.IntegerField(blank=True, null=True, verbose_name='Fallback ID')),
                ('automation_id', models.IntegerField(blank=True, null=True, verbose_name='Automation ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'Schedule',
                'verbose_name_plural': 'Schedules',
                'ordering': ('dstart', 'tstart'),
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(max_length=32, verbose_name='Topic')),
                ('abbrev', models.CharField(max_length=4, unique=True, verbose_name='Abbreviation')),
                ('slug', models.SlugField(max_length=32, unique=True, verbose_name='Slug')),
                ('button', models.ImageField(blank=True, null=True, upload_to='buttons', verbose_name='Button image')),
                ('button_hover', models.ImageField(blank=True, null=True, upload_to='buttons', verbose_name='Button image (hover)')),
                ('big_button', models.ImageField(blank=True, null=True, upload_to='buttons', verbose_name='Big button image')),
            ],
            options={
                'verbose_name': 'Topic',
                'verbose_name_plural': 'Topics',
                'ordering': ('topic',),
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=32, verbose_name='Type')),
                ('slug', models.SlugField(max_length=32, unique=True, verbose_name='Slug')),
                ('color', models.CharField(default='#ffffff', max_length=7, verbose_name='Color')),
                ('text_color', models.CharField(default='#000000', max_length=7, verbose_name='Text color')),
                ('enabled', models.BooleanField(default=True, verbose_name='Enabled')),
            ],
            options={
                'verbose_name': 'Type',
                'verbose_name_plural': 'Types',
                'ordering': ('type',),
            },
        ),
        migrations.AlterUniqueTogether(
            name='programslot',
            unique_together=set([]),
        ),
        migrations.RemoveField(
            model_name='programslot',
            name='rrule',
        ),
        migrations.RemoveField(
            model_name='programslot',
            name='show',
        ),
        migrations.AlterModelOptions(
            name='rrule',
            options={'ordering': ('pk',), 'verbose_name': 'Recurrence rule', 'verbose_name_plural': 'Recurrence rules'},
        ),
        migrations.RemoveField(
            model_name='show',
            name='broadcastformat',
        ),
        migrations.RemoveField(
            model_name='show',
            name='image_enabled',
        ),
        migrations.RemoveField(
            model_name='show',
            name='showinformation',
        ),
        migrations.RemoveField(
            model_name='show',
            name='showtopic',
        ),
        migrations.RemoveField(
            model_name='timeslot',
            name='programslot',
        ),
        migrations.AddField(
            model_name='host',
            name='biography',
            field=tinymce.models.HTMLField(blank=True, help_text='Describe yourself and your fields of interest in a few sentences.', null=True, verbose_name='Biography'),
        ),
        migrations.AddField(
            model_name='host',
            name='cba_url',
            field=models.URLField(blank=True, help_text='URL to your CBA profile.', verbose_name='CBA URL'),
        ),
        migrations.AddField(
            model_name='host',
            name='dorftv_url',
            field=models.URLField(blank=True, help_text='URL to your dorfTV channel.', verbose_name='DorfTV URL'),
        ),
        migrations.AddField(
            model_name='host',
            name='facebook_url',
            field=models.URLField(blank=True, help_text='URL to your Facebook profile.', verbose_name='Facebook URL'),
        ),
        migrations.AddField(
            model_name='host',
            name='googleplus_url',
            field=models.URLField(blank=True, help_text='URL to your Google+ profile.', verbose_name='Google+ URL'),
        ),
        migrations.AddField(
            model_name='host',
            name='height',
            field=models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Image Height'),
        ),
        migrations.AddField(
            model_name='host',
            name='image',
            field=versatileimagefield.fields.VersatileImageField(blank=True, height_field='height', help_text="Upload a picture of yourself. Images are automatically cropped around the 'Primary Point of Interest'. Click in the image to change it and press Save.", null=True, upload_to='host_images', verbose_name='Profile picture', width_field='width'),
        ),
        migrations.AddField(
            model_name='host',
            name='linkedin_url',
            field=models.URLField(blank=True, help_text='URL to your LinkedIn profile.', verbose_name='LinkedIn URL'),
        ),
        migrations.AddField(
            model_name='host',
            name='ppoi',
            field=versatileimagefield.fields.PPOIField(default='0.5x0.5', editable=False, max_length=20, verbose_name='Image PPOI'),
        ),
        migrations.AddField(
            model_name='host',
            name='twitter_url',
            field=models.URLField(blank=True, help_text='URL to your Twitter profile.', verbose_name='Twitter URL'),
        ),
        migrations.AddField(
            model_name='host',
            name='width',
            field=models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Image Width'),
        ),
        migrations.AddField(
            model_name='host',
            name='youtube_url',
            field=models.URLField(blank=True, help_text='URL to your Youtube channel.', verbose_name='Youtube URL'),
        ),
        migrations.AddField(
            model_name='note',
            name='audio_url',
            field=models.TextField(blank=True, editable=False, verbose_name='Direct URL to a linked audio file'),
        ),
        migrations.AddField(
            model_name='note',
            name='cba_id',
            field=models.IntegerField(blank=True, help_text="Link the note to a certain CBA post by giving its ID. (E.g. if your post's CBA URL is https://cba.fro.at/1234, then your CBA ID is 1234)", null=True, verbose_name='CBA ID'),
        ),
        migrations.AddField(
            model_name='note',
            name='height',
            field=models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Image Height'),
        ),
        migrations.AddField(
            model_name='note',
            name='host',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hosts', to='program.Host'),
        ),
        migrations.AddField(
            model_name='note',
            name='image',
            field=versatileimagefield.fields.VersatileImageField(blank=True, height_field='height', help_text="Upload an image to your show. Images are automatically cropped around the 'Primary Point of Interest'. Click in the image to change it and press Save.", null=True, upload_to='note_images', verbose_name='Featured image', width_field='width'),
        ),
        migrations.AddField(
            model_name='note',
            name='ppoi',
            field=versatileimagefield.fields.PPOIField(default='0.5x0.5', editable=False, max_length=20, verbose_name='Image PPOI'),
        ),
        migrations.AddField(
            model_name='note',
            name='slug',
            field=models.SlugField(default=1, help_text='A simple to read URL for your show.', max_length=32, unique=True, verbose_name='Slug'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='note',
            name='summary',
            field=models.TextField(blank=True, help_text='Describe your upcoming show in some sentences. Avoid technical data like airing times and contact information. They will be added automatically.', verbose_name='Summary'),
        ),
        migrations.AddField(
            model_name='note',
            name='user',
            field=models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='users', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='note',
            name='width',
            field=models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Image Width'),
        ),
        migrations.AddField(
            model_name='show',
            name='cba_series_id',
            field=models.IntegerField(blank=True, help_text='Link your show to a CBA series by giving its ID. This will enable CBA upload and will automatically link your show to your CBA archive. Find out your ID under https://cba.fro.at/series', null=True, verbose_name='CBA Series ID'),
        ),
        migrations.AddField(
            model_name='show',
            name='fallback_id',
            field=models.IntegerField(blank=True, null=True, verbose_name='Fallback ID'),
        ),
        migrations.AddField(
            model_name='show',
            name='height',
            field=models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Image Height'),
        ),
        migrations.AddField(
            model_name='show',
            name='logo',
            field=models.ImageField(blank=True, null=True, upload_to='show_images', verbose_name='Logo'),
        ),
        migrations.AddField(
            model_name='show',
            name='ppoi',
            field=versatileimagefield.fields.PPOIField(default='0.5x0.5', editable=False, max_length=20, verbose_name='Image PPOI'),
        ),
        migrations.AddField(
            model_name='show',
            name='width',
            field=models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Image Width'),
        ),
        migrations.AddField(
            model_name='timeslot',
            name='is_repetition',
            field=models.BooleanField(default=False, verbose_name='REP'),
        ),
        migrations.AddField(
            model_name='timeslot',
            name='memo',
            field=models.TextField(blank=True, verbose_name='Memo'),
        ),
        migrations.AddField(
            model_name='timeslot',
            name='playlist_id',
            field=models.IntegerField(null=True, verbose_name='Playlist ID'),
        ),
        migrations.AlterField(
            model_name='host',
            name='website',
            field=models.URLField(blank=True, help_text='URL to your personal website.', verbose_name='Website'),
        ),
        migrations.AlterField(
            model_name='musicfocus',
            name='big_button',
            field=models.ImageField(blank=True, null=True, upload_to='buttons', verbose_name='Big button image'),
        ),
        migrations.AlterField(
            model_name='musicfocus',
            name='button',
            field=models.ImageField(blank=True, null=True, upload_to='buttons', verbose_name='Button image'),
        ),
        migrations.AlterField(
            model_name='musicfocus',
            name='button_hover',
            field=models.ImageField(blank=True, null=True, upload_to='buttons', verbose_name='Button image (hover)'),
        ),
        migrations.AlterField(
            model_name='note',
            name='content',
            field=tinymce.models.HTMLField(help_text='Describe your upcoming show in detail.', verbose_name='Content'),
        ),
        migrations.AlterField(
            model_name='note',
            name='show',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='program.Show'),
        ),
        migrations.AlterField(
            model_name='note',
            name='title',
            field=models.CharField(help_text="Give your note a good headline. What will your upcoming show be about? Try to arouse interest to listen to it!<br>Avoid technical data like the show's name, its airing times or its episode number. These data are added automatically.", max_length=128, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='show',
            name='description',
            field=tinymce.models.HTMLField(blank=True, help_text='Describe your show in detail.', null=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='show',
            name='email',
            field=models.EmailField(blank=True, help_text='The main contact email address for your show.', max_length=254, null=True, verbose_name='E-Mail'),
        ),
        migrations.AlterField(
            model_name='show',
            name='image',
            field=versatileimagefield.fields.VersatileImageField(blank=True, height_field='height', help_text="Upload an image to your show. Images are automatically cropped around the 'Primary Point of Interest'. Click in the image to change it and press Save.", null=True, upload_to='show_images', verbose_name='Image', width_field='width'),
        ),
        migrations.AlterField(
            model_name='show',
            name='name',
            field=models.CharField(help_text="The show's name. Avoid a subtitle.", max_length=255, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='show',
            name='short_description',
            field=models.TextField(help_text='Describe your show in some sentences. Avoid technical data like airing times and contact information. They will be added automatically.', verbose_name='Short description'),
        ),
        migrations.AlterField(
            model_name='show',
            name='slug',
            field=models.CharField(help_text='A simple to read URL for your show', max_length=255, unique=True, verbose_name='Slug'),
        ),
        migrations.AlterField(
            model_name='show',
            name='website',
            field=models.URLField(blank=True, help_text='Is there a website to your show? Type in its URL.', null=True, verbose_name='Website'),
        ),
        migrations.AlterField(
            model_name='timeslot',
            name='start',
            field=models.DateTimeField(verbose_name='Start time'),
        ),
        migrations.DeleteModel(
            name='BroadcastFormat',
        ),
        migrations.DeleteModel(
            name='ProgramSlot',
        ),
        migrations.DeleteModel(
            name='ShowInformation',
        ),
        migrations.DeleteModel(
            name='ShowTopic',
        ),
        migrations.AddField(
            model_name='schedule',
            name='rrule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='program.RRule', verbose_name='Recurrence rule'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='show',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='program.Show', verbose_name='Show'),
        ),
        migrations.AddField(
            model_name='show',
            name='category',
            field=models.ManyToManyField(blank=True, related_name='shows', to='program.Category', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='show',
            name='language',
            field=models.ManyToManyField(blank=True, related_name='language', to='program.Language', verbose_name='Language'),
        ),
        migrations.AddField(
            model_name='show',
            name='rtrcategory',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='shows', to='program.RTRCategory', verbose_name='RTR Category'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='show',
            name='topic',
            field=models.ManyToManyField(blank=True, related_name='shows', to='program.Topic', verbose_name='Topic'),
        ),
        migrations.AddField(
            model_name='show',
            name='type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='shows', to='program.Type', verbose_name='Type'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='timeslot',
            name='schedule',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='timeslots', to='program.Schedule', verbose_name='Schedule'),
            preserve_default=False,
        ),
    ]
